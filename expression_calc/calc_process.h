#pragma once

// --  Константы  ------------------------------------------------------------

#define M_E        2.71828182845904523536
#define M_LOG2E    1.44269504088896340736
#define M_LOG10E   0.434294481903251827651
#define M_LN2      0.693147180559945309417
#define M_LN10     2.30258509299404568402
#define M_PI       3.14159265358979323846
#define M_PI_2     1.57079632679489661923
#define M_PI_4     0.785398163397448309616
#define M_1_PI     0.318309886183790671538
#define M_2_PI     0.636619772367581343076
#define M_2_SQRTPI 1.12837916709551257390
#define M_SQRT2    1.41421356237309504880
#define M_SQRT1_2  0.707106781186547524401

//const double PI = 3.141592653589793238463;
//const double E = 2.71828182845904523536;

// --  Результат обработки строки - тип ---------------------------------------
typedef enum            // результат обработки строки - тип
{
  CALC_LINE_OK,         // это корректное выражение
  CALC_LINE_COMMENT,    // это комментарий
  CALC_LINE_EMPTY,      // это совершенно пустая строка
  CALC_LINE_SPACES,     // это строка без значащих символов
  CALC_ERR_INPUT,       // ошибка - не хватает памяти для чтения строки
  CALC_ERR_PARSE,       // ошибка - во время разбора выражения
  CALC_ERR_EVAL ,       // ошибка - преобразования в число
  CALC_ERR_MEMORY,      // ошибка - выделения памяти
  CALC_ERR_ZERO_DIV,    // ошибка - деление на 0
  CALC_ERR_BRACKETS,    // ошибка - непарность скобок
  CALC_ERR_SQRT_N,      // ошибка - квадратный корень из отрицательных
  CALC_ERR_NAN,         // ошибка - NaN - не число
  CALC_ERR_INF,         // ошибка - Inf - бесконечность (например 0 в отрицательных ^)
  CALC_ERR_ALGO,        // ошибка - в алгоритме что-то идёт не так
  CALC_ERR_X,           // ошибка - .... пока не придумано
  CALC_ERR_VARS,        // ошибка - с переменными
  CALC_ERR_VARZ,        // ошибка - переменная без имени
  CALC_ERR_VAR_BADNAME, // ошибка - переменная - плохое имя - не реализовано
                        // не дискриминируем переменную из-за необычного имени
  CALC_ERR_OTHER,       // ошибка - прочие
  CALC_ERR_COUNT,       // ошибка - масимальный номер перечисления
} calc_result_type;


// --  Функции  --------------------------------------------------------------

// вычисляет строку выражений, возвращает тип строки (ок или ошибка) и результат
int process_line(char const* input_line, double* result);
